import { flatten } from 'flat';

export default flatten({
  common: {
    redirecting: 'Redirecting...',
  },
  locale: 'en',
  usage: 'Usage',
  aiProvider: 'AI Provider',
  aiProviderSubscription: 'Subscribe to AI Service',
  aiProviderLocalAIKit: 'Local AIKit component',
  selectMonth: 'Select Month',
  subscribeAITip: 'Subscribe to AIGNE Hub to unlock AI capabilities.',
  unsubscribe: 'Unsubscribe',
  unsubscribeTip: 'Unsubscribing will disable access to AI services.',
  cancel: 'Cancel',
  unsubscribeAt: 'Unsubscribe at',
  cancelled: 'Cancelled',
  recoverSubscription: 'Recover Subscription',
  recoverSubscriptionTip: 'After recovering the subscription, you can use the AI services we provide.',
  recoverSubscriptionSucceed: 'Subscription recovery successful!',
  total: 'Total',
  monthlySpend: 'Monthly Spend',
  viewSubscriptionDetail: 'View subscription details',
  subscriptionPastDueTip:
    'Your subscription is overdue. Please make a payment promptly to restore your subscription service.',
  payNow: 'Pay Now',
  enterHint: 'Press Enter to create',
  type: 'Type',
  model: 'Model',
  viewPricing: 'View Model Pricing',

  // Pricing page
  pricing: {
    title: 'AIGNE Hub Model Pricing',
    subtitle: 'Pay only for what you use. Browse our AI model library to find the perfect fit for your project.',
    searchPlaceholder: 'Search models or providers',
    filters: {
      providers: 'Supported Providers',
      allProviders: 'All Providers',
      types: 'Model Types',
      allModels: 'All Models',
      textGeneration: 'Text Generation',
      imageGeneration: 'Image Generation',
      embedding: 'Embedding',
      audioTranscription: 'Audio Transcription',
      sortBy: 'Sort By',
      priceDefault: 'By Price',
      priceLowToHigh: 'Price: Low to High',
      priceHighToLow: 'Price: High to Low',
    },
    table: {
      model: 'Model',
      provider: 'Provider',
      type: 'Type',
      inputPrice: 'Input Price',
      outputPrice: 'Output Price',
      contextWindow: 'Context',
      status: 'Status',
      actions: 'Actions',
    },
    status: {
      available: 'Available',
      pending: 'Not yet used',
      warning: 'Unavailable',
    },
  },

  // AIGNE Hub integrations
  welcome: 'Welcome to AIGNE Hub',
  welcomeDesc: 'Get started by connecting AI providers. You can also enable credit billing to track and manage usage.',

  aiConfig: 'Config',
  quickStarts: 'Quick Start',
  // AI Provider features
  aiProviderSettings: 'AI Provider Settings',
  aiProviderSettingsDesc: 'Configure and manage your AI service providers and API credentials',
  usageAnalytics: 'Usage Analytics',
  usageAnalyticsDesc: 'Monitor AI service usage, costs, and performance metrics',
  userManagement: 'User Management',
  userManagementDesc: 'Manage user access and permissions for AI services',

  // Credits configuration
  enableCredits: 'Enable Credit Billing',
  configCredits: 'Configure Model Rates',
  enableCreditsDesc: 'Set up credit-based billing to manage usage',
  creditsConfigTitle: 'Enable Credit Billing',
  creditsConfigDesc: 'When enabled, users will need to purchase credits to access AI services. Follow these steps:',
  gotoConfig: 'Go to Configuration',
  installPaymentKit: 'Step 1: Install Payment Kit',
  updatePreferences: 'Step 2: Update AIGNE Hub Preferences',
  installPaymentKitDesc:
    'Install the Payment Kit component from the Blocklet Store. This is required for credit billing and enables multiple payment methods for users.',

  configModelRates: 'Step 3: Configure Model Rates',
  configModelRatesDesc: 'Configure pricing for each AI model and provider in the "AI Config - Model Rates" section.',

  // Types
  modelTypes: {
    chatCompletion: 'Text',
    completion: 'Text',
    imageGeneration: 'Image',
    videoGeneration: 'Video Generation',
    audioGeneration: 'Audio Generation',
    embedding: 'Embedding',
    transcription: 'Audio Transcription',
    speech: 'Text-to-Speech',
  },

  // Units
  modelUnits: {
    tokens: 'tokens',
    images: 'images',
    minutes: 'minutes',
    characters: 'characters',
  },
  // Configuration section
  config: {
    // AI Providers
    aiProviders: 'AI Providers',

    // Model Rates
    modelRates: {
      title: 'Model Rates',
      description: 'Configure pricing rates for different AI models and providers',

      // Actions
      actions: {
        add: 'Add Model Rate',
        edit: 'Edit Model Rate',
        delete: 'Delete',
        save: 'Save',
        cancel: 'Cancel',
      },

      // Fields
      fields: {
        modelName: 'Model',
        provider: 'Provider',
        type: 'Type',
        inputRate: 'Input',
        outputRate: 'Output',
        description: 'Description',
        actions: 'Actions',
      },

      // Form
      form: {
        modelName: {
          label: 'Model Name',
          placeholder: 'e.g., gpt-4o',
          required: 'Please enter a model name',
        },
        modelDisplay: {
          label: 'Display Name',
          placeholder: 'Auto-generated from model name',
          description: 'Model display name for UI presentation (optional)',
        },
        rateType: {
          label: 'Rate Type',
          required: 'Please select a rate type',
          options: {
            chatCompletion: 'Text',
            imageGeneration: 'Image',
            embedding: 'Embedding',
          },
        },
        inputRate: {
          label: 'Input Cost (Credits per Token)',
          placeholder: '0',
          required: 'Please enter an input rate',
        },
        outputRate: {
          label: 'Output Cost (Credits per Token)',
          placeholder: '0',
          required: 'Please enter an output rate',
        },
        providers: {
          label: 'Providers',
          tooltip: 'Choose which AI providers support this model',
          required: 'Please select at least one provider',
        },
        description: {
          label: 'Description',
          placeholder: 'Add notes about this rate (optional)',
        },
        advancedOptions: 'Advanced Options',
        maxTokens: {
          label: 'Max Tokens',
          placeholder: 'Enter max tokens',
        },
        features: {
          label: 'Features',
          tools: 'Tools',
          thinking: 'Thinking',
          vision: 'Vision',
        },
        imageGeneration: {
          title: 'Image Generation Options',
          max: {
            label: 'Single Generation Images',
            placeholder: 'Enter single generation images',
          },
          quality: {
            label: 'Quality',
            placeholder: 'Enter quality options',
          },
          size: {
            label: 'Size',
            placeholder: 'Enter size options',
          },
          style: {
            label: 'Style',
            placeholder: 'Enter style options',
          },
        },
      },

      // Messages
      createSuccess: 'Model rate created',
      updateSuccess: 'Model rate updated',
      deleteSuccess: 'Model rate deleted',
      createFailed: 'Unable to create model rate',
      updateFailed: 'Unable to update model rate',
      deleteFailed: 'Unable to delete model rate',
      fetchFailed: 'Unable to load model rates',

      // Search
      search: {
        modelPlaceholder: 'Search by model name',
      },

      // Configuration info
      configInfo: {
        title: 'Model Rate Preferences',
        creditValue: 'AIGNE Hub Credits Price: ',
        profitMargin: 'Target Profit Margin: ',
        formula: 'Pricing Formula',
        adjustSettings: 'To change base price and profit margin, visit',
        settingsLink: 'AIGNE Hub Preferences',
        autoCalculate: 'Auto Calculate',
        actualCost: 'Token Cost: ',
        creditCost: 'AIGNE Hub Credits Cost: ',
        profitRate: 'Profit Rate: ',
        formulaTitle: 'Calculation Formula',
        variableExplanation: 'Variable Explanation:',
        creditPrice: 'AIGNE Hub Credits Price',
        targetProfitMargin: 'Target Profit Margin',
        modelTokenCost: 'Model Cost per Token',
        actualProviderCost: 'Actual Provider Cost',
        formulaExample: 'Example',
        pricingFormula: 'Pricing Calculation Formula',
        tokenConsumption: 'AIGNE Hub Credits Consumption per Token',
        creditPriceDesc: 'Price of 1M AIGNE Hub Credits',
        profitMarginDesc: 'Percentage added on top of cost',
        modelCostDesc: 'Actual cost per token charged by AI providers',
        aicRateConfig: 'AIGNE Hub Credits Rate Configuration',
        inputTokenConsumption: 'AIGNE Hub Credits consumption per input token',
        outputTokenConsumption: 'AIGNE Hub Credits consumption per output token',
        currentModelCost: 'Current Model Cost',
        estimatedProfitRate: 'Estimated Profit Rate',
        inputCost: 'Input Cost',
        outputCost: 'Output Cost',
        perToken: ' / Token',
        explanation: {
          title: 'Pricing Explanation',
          creditExplain: 'AIGNE Hub Credits is the billing unit used for AI services',
          formulaExplain:
            'Auto-calculate AIGNE Hub Credits consumption per token based on actual model cost and target profit margin',
          profitExplain: 'The system adds target profit margin to the model cost to determine final pricing',
        },
        customModelCost: 'Model Cost',
        customModelCostDesc: 'Input and output costs will be used to calculate AIGNE Hub Credits consumption per token',
        viewPricing: 'View Pricing',
        pricingTooltip: 'Click to view official pricing information',
        pricingMenuTitle: 'View Model Pricing Information',
        unitTooltip: {
          credit: '1M = 1,000,000 AIGNE Hub Credits (per million AIGNE Hub Credits)',
          token: '1M = 1,000,000 tokens (per million tokens)',
        },
      },

      // Delete dialog
      deleteDialog: {
        title: 'Delete Model Rate',
        message: 'Delete this model rate? This action cannot be undone.',
        confirm: 'Delete',
        cancel: 'Cancel',
      },
    },
  },

  // Common actions
  edit: 'Edit',
  delete: 'Delete',
  create: 'Create',
  update: 'Update',
  save: 'Save',
  close: 'Close',
  confirm: 'Confirm',
  yes: 'Yes',
  no: 'No',
  loading: 'Loading...',
  noData: 'No data available',
  required: 'This field is required',
  optional: 'Optional',

  // AI Providers page
  aiProviders: 'AI Providers',
  aiProvidersDesc: 'Connect and manage AI service providers',
  addProvider: 'Add Provider',
  editProvider: 'Edit Provider',
  awsRegionDesc: 'The AWS region for your Bedrock service',
  provider: 'Provider',
  providerName: 'Provider',
  providerNameRequired: 'Please select a provider',
  providerInfo: 'Provider Information',
  baseUrl: 'Base URL',
  region: 'Region',
  regionRequired: 'Please enter a region',
  endpointRegion: 'Endpoint / Region',
  editEndpointTip: 'Edit Endpoint',
  editRegionTip: 'Edit Region',
  enabled: 'Enabled',
  disabled: 'Disabled',
  connected: 'Connected',
  disconnected: 'Disconnected',
  status: 'Status',
  enableStatus: 'Enable',
  actions: 'Actions',

  // Credentials
  credentials: 'Credentials',
  credentialTooltip:
    'Authentication details for service access (e.g., AWS "Access Key + Secret Key" or LLM "API Key")—enter required sensitive info for valid access.',
  credentialCount: '{count} credential',
  credentialCountPlural: '{count} credentials',
  addNow: 'Add Now',
  addCredential: 'Add Credential',
  editCredential: 'Edit Credential',
  deleteCredential: 'Delete Credential',
  manageCredentials: 'Manage Credentials',
  noCredentials: 'No credentials added yet',
  credentialName: 'Credential Name',
  credentialNameRequired: 'Please enter a credential name',
  credentialValue: 'API Key',
  credentialValueRequired: 'Please enter your API key',
  credentialType: 'Credential Type',
  credentialTypeRequired: 'Credential type is required',
  enterCredentialValue: 'Enter credential value',
  apiKey: 'API Key',
  accessKeyPair: 'Access Key Pair',
  custom: 'Custom',
  accessKeyId: 'Access Key ID',
  secretAccessKey: 'Secret Access Key',
  usageCount: 'Usage Count',
  lastUsed: 'Last Used',
  created: 'Created',
  deleteCredentialConfirm: 'Delete this credential?',

  // Messages
  providerCreated: 'Provider added',
  providerUpdated: 'Provider updated',
  providerEnabled: 'Provider enabled',
  providerDisabled: 'Provider disabled',
  createProviderFailed: 'Unable to add provider',
  updateProviderFailed: 'Unable to update provider',
  fetchProvidersFailed: 'Unable to load providers',

  createCredentialFailed: 'Unable to add credential',
  updateCredentialFailed: 'Unable to update credential',
  deleteCredentialFailed: 'Unable to delete credential',

  selectProviders: 'Select Providers',
  submitFailed: 'Unable to submit',

  // Home page
  homeSubtitle: 'Decentralized AI access for blocklets',
  creditBillingInfo: 'Credit billing is enabled. Purchase credits or manage your balance below.',
  loginToAccess: 'Log In to Continue',
  configuration: 'Configuration',
  playground: 'Playground',

  // Chat/Conversation related
  chat: {
    loading: 'Loading...',
    clearHistory: 'Clear conversation history',
    clearHistoryConfirm: 'Are you sure you want to clear all conversation history?',
    placeholders: {
      chat: 'Type your message... (Shift+Enter for new line)',
      imageGeneration: 'Describe the image you want to generate...',
      embedding: 'Enter text to convert to embedding vector...',
    },
    modelTypes: {
      chatCompletion: 'Chat',
      imageGeneration: 'Image',
      embedding: 'Embedding',
    },
    cacheInfo: '{count} cached images ({size} MB)',
    noModelsAvailable: 'No models available',
  },
  integration: 'Integration',
  manageCredits: 'Manage Credits',
  creditUsage: 'Credit Usage',
  images: 'images',
  credits: 'Credits',
  creditsValue: 'Credits Used',
  tokens: 'tokens',
  requests: 'Requests',
  successRate: 'success rate',
  duration: 'Duration',
  last7Days: 'Last 7 Days',
  last30Days: 'Last 30 Days',
  thisMonth: 'This Month',
  lastMonth: 'Last Month',
  dailyRequestsUsage: 'Daily Requests Usage',
  showing: 'Showing',
  of: 'of',
  user: 'User',
  application: 'Application',
  quickIntegration: 'Quick Integration',
  integrationDesc: 'Get started with AIGNE Hub using the AIGNE Framework:',
  codeCopied: 'Code copied to clipboard!',

  // Analytics & Credit Board
  analytics: {
    creditUsage: 'Credit Usage',
    creditBoardDescription: 'Track your model usage and manage credits',
    allCreditsUsage: 'All Credit Usage',
    allCreditBoardDescription: 'Monitor all users and manage credits',
    loadingData: 'Loading...',
    startDate: 'Start Date',
    endDate: 'End Date',
    creditsBalance: 'Credit Balance',
    availableCredits: 'Available credits for AI models',
    addCredits: 'Add Credits',
    creditsBalanceDescription: 'Your balance is sufficient',
    creditsBalanceLowDescription: 'Low balance - consider adding credits soon',
    creditsBalanceVeryLowDescription: 'Very low balance - please add credits',
    creditsBalanceHelp: 'View balance and usage information',
    overdueDescription: 'Please add credits to continue using services',
    noLimitDescription: 'Your account has unlimited access to AI services',
    viewBilling: 'View Billing',
    totalCreditsUsed: 'Total Credits Used',
    totalUsage: 'Total Model Usage',
    totalTokens: 'Total Tokens',
    totalImages: 'Total Images Generated',
    totalRequests: 'Total Calls',
    dailyCreditsUsage: 'Daily Credits Trend',
    dailyUsage: 'Daily Usage Trend',
    tokenUsage: 'Token Usage',
    modelUsage: 'Model Usage',
    modelUsageStats: 'Model Usage Statistics',
    modelUsageStatsDescription: 'Top most used models in the period',
    modelUsageStatsTotal: 'Total {total} models called in the period',
    modelUsageSummaryDescription:
      'This value is the combined usage across all models (units may vary by model type). Hover to view detailed usage.',
    ofTotalUsage: 'of total calls',
    callHistory: 'Call History',
    callHistoryDescription: 'View all model API calls',
    searchPlaceholder: 'Search by model or {did}',
    allStatus: 'All',
    timestamp: 'Time',
    noCallsFound: 'No calls found',
    dailyTokenUsage: 'Daily Token Usage',
    noLimit: 'No Limit',
    modelUsageStatsEmpty: 'No usage yet',
    dailyUsageEmpty: 'No usage yet',
    refresh: 'Refresh',
    refreshSuccess: 'Updated',
    fromPreviousDay: 'from previous day',
    fromPreviousWeek: 'from previous week',
    fromPreviousMonth: 'from previous month',
    fromPreviousPeriod: 'from previous period',
    remaining: 'remaining',
    usedAmount: 'Used {used} / Total {total}',
  },

  quickSelect: 'Quick Select',
  customRange: 'Custom Range',
  dataAvailableFrom: 'Showing data from the past 3 months',
  usedBy: 'Used By',
  testStatus: 'Test Status',
  testing: 'Testing...',
  errorConnected: '{errorCount} of {total} invalid',
  export: 'Export',
});
